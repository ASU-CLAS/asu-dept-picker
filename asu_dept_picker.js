(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * @file
 * Javascript for ASU Dept Picker
 *
 * Requires React/ReactDOM
 */
var AsuDeptPicker = require('./components/asu-dept-picker.jsx');

/**
 * Provides an ASU department picker widget.
 */
(function ($) {
  Drupal.behaviors.asu_dept_picker = {
    attach: function(context, settings) {
      // setup any asu-dept-picker fields
      $('.asu-dept-picker:not([data-reactid])', context).each(function() {
        var delta = $(this).attr('data-delta');
        var config = settings.asu_dept_picker[delta];

        var asu_dept_picker = React.createElement(AsuDeptPicker, config);
        ReactDOM.render(asu_dept_picker, this);
      });
    }
  }
})(jQuery);


},{"./components/asu-dept-picker.jsx":2}],2:[function(require,module,exports){
/**
 * ASU Department Picker Component
 */
var $ = jQuery;
var DeptTree = require('./dept-tree.jsx');
var DeptList = require('./dept-list.jsx');

module.exports = React.createClass({displayName: "exports",
  componentWillMount: function() {
    // Escape support
    $(document).on('keyup', function(e) {
      if (e.keyCode == 27) {
        if ($('.asu-dept-picker-modal').has('dialog-open')) {
          $('.asu-dept-picker-modal').removeClass('dialog-open');
          e.preventDefault();
          return false;
        }
      }
    });
  },

  componentDidMount: function() {
    $(window).on('dept-list-item.remove', this.handleRemoveItem);
  },

  getInitialState: function() {
    return {
      config: {items: [], options: {}},
      selectedDepartments: [],
      currentNode: null,
      includeSubdepts: false
    };
  },

  render: function() {
    return React.createElement("div", {className: "widget-asu-dept-picker"}, 
      this.renderBrowseButton(), 
      this.renderDepartmentList(), 
      this.renderModal()
    )
  },

  renderModal: function() {
    return React.createElement("div", {ref: "modal", className: "asu-dept-picker-modal"}, 
      React.createElement("div", {className: "dialog"}, 
        React.createElement("div", {className: "dialog-title"}, 
          this.props.title || "Select Department", 
          React.createElement("div", {className: "close-dialog", onClick: this.handleCancelClick}, 
            React.createElement("span", {className: "fa fa-close"})
          )
        ), 
        React.createElement(DeptTree, React.__spread({ref: "deptTree"},  this.props, 
          {onTreeClick: this.handleDeptTreeClick})
        ), 
        React.createElement("div", {className: "actions"}, 
          React.createElement("div", {className: "form-item form-type-checkbox"}, 
            React.createElement("input", {
              ref: "include_subdept", 
              type: "checkbox", 
              className: "form-checkbox", 
              onClick: this.handleSubdeptClick, 
              defaultChecked: this.state.includeSubdepts ? 'checked' : ''}
            ), 
            React.createElement("label", {className: "option", onClick: this.handleLabelClick}, " Include sub-departments?"), 
            React.createElement("div", {className: "description", style: {'display': 'none'}}, 
              "This will include all sub-departments beneath the selected department."
            )
          ), 
          React.createElement("input", {type: "button", 
            className: "form-submit", 
            onClick: this.handleSubmitClick, 
            value: "Submit"}
          ), 
          React.createElement("input", {type: "button", 
            className: "form-submit", 
            onClick: this.handleCancelClick, 
            value: "Cancel"}
          )
        )
      )
    )
  },

  renderDepartmentList: function() {
    return React.createElement(DeptList, {items: this.state.selectedDepartments})
  },

  renderBrowseButton: function() {
    return React.createElement("div", {className: "browse-button"}, 
      React.createElement("input", {type: "button", 
        value: "Browse", 
        className: "form-submit", 
        onClick: this.handleBrowseClick}
      )
    )
  },

  handleRemoveItem: function(e, item) {
    console.log('Removing item...', item);
  },

  handleSubdeptClick: function() {
    this.setState({ includeSubdepts: !this.state.includeSubdepts });
  },

  handleLabelClick: function() {
    $(this.refs.include_subdept).trigger('click');
  },

  handleCancelClick: function() {
    this.closeModal();
  },

  handleSubmitClick: function() {
    // setup config
    this.setDeptConfig(this.refs.deptTree.state.currentNode);
    // update selected departments list
    this.setSelectedDepartments();
    // close the modal
    this.closeModal();
  },

  handleBrowseClick: function(event) {
    this.openModal();
  },

  handleDeptTreeClick: function(data) {
    this.setState({ currentNode: data.node });
  },

  openModal: function() {
    $(this.refs.modal).addClass('dialog-open');
  },

  closeModal: function() {
    $(this.refs.modal).removeClass('dialog-open');
  },

  setSelectedDepartments: function() {
    var deptTree = this.refs.deptTree;
    var config = this.state.config;
    var depts = [];

    $.each(config.items, function(index, item) {
      depts.push({
        id: item.dept_id,
        title: deptTree.getDeptPath(item.tid)
      });
    });

    this.setState({ selectedDepartments: depts });
  },

  setDeptConfig: function(data) {
    // get the tree path to set the label
    var config = this.state.config;

    var unique = true;
    $.each(config.items, function(index, item) {
      if (item.dept_nid == data.dept_nid) {
        unique = false;
        // update configuration
        config.options[item.dept_id].subdepts = this.state.includeSubdepts;
      }
    }.bind(this));

    if (unique) {
      config.items.push({
        'dept_id': data.dept_id,
        'dept_nid': data.dept_nid,
        'tree_nids': data.tree_nids,
        'tid': data.tid
      });

      config.options[data.dept_id] = {
        subdepts: this.state.includeSubdepts
      };
    }

    this.setState({ config: config });
  }
});


},{"./dept-list.jsx":4,"./dept-tree.jsx":5}],3:[function(require,module,exports){
/**
 * ASU Department List Item Component
 */
var $ = jQuery;

module.exports = React.createClass({displayName: "exports",

  handleItemRemove: function(e) {
    $(window).trigger('dept-list-item.remove', this);
  },

  render: function() {
    return React.createElement("li", {ref: "dept"}, 
      this.props.title, 
      React.createElement("span", {className: "tag remove", "data-dept-id": this.props.id}, 
        React.createElement("span", {onClick: this.handleItemRemove, className: "fa fa-close"})
      )
    )
  }
});


},{}],4:[function(require,module,exports){
/**
 * ASU Department Picker Component
 */
var DeptListItem = require('./dept-list-item');

module.exports = React.createClass({displayName: "exports",
  getInitialState: function() {
    return {
      items: this.props.items || []
    }
  },

  componentWillReceiveProps: function(nextProps) {
    this.setState({ items: nextProps.items });
  },

  render: function() {
    return React.createElement("ul", {className: "asu-dept-list"}, 
      this.renderList()
    )
  },

  renderList: function() {
    return this.state.items.map(function(item) {
      return React.createElement(DeptListItem, {key: item.id, title: item.title})
    });
  },
});


},{"./dept-list-item":3}],5:[function(require,module,exports){
var $ = jQuery;

/**
 * Department Tree Component
 */
module.exports = React.createClass({displayName: "exports",
  getInitialState: function() {
    return {
      treeData: JSON.parse(this.props.tree_json_data),
      currentNode: {
        dept_id: 1234,
      }
    }
  },
  componentDidMount: function() {
    // initialize tree plugin...
    var el = this.refs.treeWidget;
    var tree_data = this.state.treeData;
    var topLevel = 10;

    var defaults = {
      openAt: 1,
      showOnly: null,
      autoOpen: 0
    };
    options = $.extend(defaults, this.props);

    $(el).tree({
      data: tree_data,
      closedIcon: $('<span class="fa fa-plus-circle"></span>'),
      openedIcon: $('<span class="fa fa-minus-circle"></span>'),

      // First level open
      autoOpen: options.autoOpen,
      selectable: true,

      // Assign dept_id attribute to each tree <li>
      onCreateLi: function (node, $li) {
        $li.attr('dept_nid', node.dept_nid);
        $li.attr('dept_id', node.dept_id);

        if (options.showOnly && Array.isArray(options.showOnly) && options.showOnly.length) {
          $(el).addClass('trimmed');

          $.each(options.showOnly, function(index, item){
            if (item == node.dept_nid || node.dept_id == 'ASU') {
              $li.addClass('visible');
            }
          });
        }

        if (!node.hasChildren()) {
          $li.find('.jqtree-element').prepend('<span class="jqtree-folder-icon fa fa-bookmark"></span>');
        }
      }
    });

    $(el).bind('tree.click', this.onTreeClick);
  },
  render: function() {
    return React.createElement("div", {className: "asu-dept-tree"}, 
      React.createElement("div", {className: "tree-wrapper", ref: "treeWidget"}, "Tree widget")
    )
  },
  onTreeClick: function(event) {
    event.node.tree_nids = this.getTreeIds(event.node);
    this.setState({ currentNode: event.node });
    this.props.onTreeClick(event);
  },
  getDeptPath: function(dept_tid, path, reverse) {
    switch (arguments.length) {
      case 1: path = [];
      case 2: reverse = true;
    }

    if (item = this.findRootDept(dept_tid, 'tid')) {

      var className = ['fragment'];

      if (item.parents[0] == '0') {
        // abbreviate Arizona State University
        item.name = 'ASU';
        className.push('first');
      }
      if (item.children.length == 0) {
        className.push('last');
      }

      path.push(React.createElement("span", {key: dept_tid, className: className.join(' ')}, item.name));
      if (item.parents.length) {
        path = this.getDeptPath(item.parents[0], path, false);
      }
    }

    if (reverse) {
      path = path.reverse();
    }

    return path;
  },
  getTreeIds: function(tree, tree_ids) {
    if (arguments.length == 1) {
      tree_ids = [];
    }

    tree_ids.push(tree.dept_nid);

    for (var i = 0; i < tree.children.length; i++) {
      this.getTreeIds(tree.children[i], tree_ids);
    }

    return tree_ids;
  },
  findRootDept: function(dept_id, id_type, data) {
    var dept = null;

    switch(arguments.length) {
      case 1:
        id_type = 'dept_nid';
      case 2:
        data = this.state.treeData;
        break;
    }

    if (arguments.length == 1) {
      id_type = 'dept_nid';
    }

    for (var i = 0; i < data.length; i++) {
      if (dept == null && data[i] != null) {
        if (data[i][id_type] == dept_id) {
          return data[i];
        }
        else if (data[i].hasOwnProperty('children')) {
          dept = this.findRootDept(dept_id, id_type, data[i].children);
        }
      }
      else {
        break;
      }
    }
    return dept;
  }
});

/**
 * Saves the ids of all departments under currently selected tree on #people's data object
 * @param {object}
 *  Nested JSON object with department data
 */
function asu_isearch_dept_get_tree_ids(tree, tree_ids) {

  if (arguments.length == 1) {
    tree_ids = [];
  }

  tree_ids.push(tree.dept_nid);

  for (var i = 0; i < tree.children.length; i++) {
    asu_isearch_dept_get_tree_ids(tree.children[i], tree_ids);
  }

  return tree_ids;
}

function asu_isearch_dept_get_tree_path_ids(tree, dept_nid, tree_path) {
  
  if (arguments.length == 2) {
    var tree_path = [];
  }

  if (item = asu_isearch_dept_find_root(tree, dept_nid, 'dept_nid')) {
    tree_path.push(item.dept_nid);
    if (item.parents.length) {
      var tree_item = asu_isearch_dept_find_root(tree, item.parents[0], 'tid');
      if (tree_item) {
        asu_isearch_dept_get_tree_path_ids(tree, tree_item.dept_nid, tree_path);
      }
    }
  }

  return tree_path;
}

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
