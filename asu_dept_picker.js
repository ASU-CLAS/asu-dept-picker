(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * @file
 * Javascript for ASU Dept Picker
 *
 * Requires React/ReactDOM
 */
var AsuDeptPicker = require('./components/asu-dept-picker.jsx');

/**
 * Provides an ASU department picker widget.
 */
(function ($) {
  Drupal.behaviors.asu_dept_picker = {
    attach: function(context, settings) {
      // setup any asu-dept-picker fields
      $('.asu-dept-picker:not([data-reactid])', context).each(function() {
        var delta = $(this).attr('data-delta');
        var config = settings.asu_dept_picker[delta];

        var asu_dept_picker = React.createElement(AsuDeptPicker, config);
        ReactDOM.render(asu_dept_picker, this);
      });
    }
  }
})(jQuery);


},{"./components/asu-dept-picker.jsx":2}],2:[function(require,module,exports){
/**
 * ASU Department Picker Component
 */
var DeptTree = require('./dept-tree');
var DeptList = require('./dept-list');
var Modal = require('./modal');


module.exports = React.createClass({displayName: "exports",
  getInitialState: function() {
    return {
      config: {items: [], options: {}},
      selectedDepartments: [],
      currentNode: null,
      includeSubdepts: false
    };
  },

  render: function() {
    return React.createElement("div", {className: "widget-asu-dept-picker"}, 
      this.renderBrowseButton(), 
      this.renderDepartmentList(), 
      this.renderModal()
    )
  },

  renderModal: function() {
    var deptTree = React.createElement(DeptTree, React.__spread({
      ref: "deptTree"},  this.props, 
      {onTreeClick: this.handleDeptTreeClick})
    )

    return React.createElement(Modal, {
      ref: "modal", 
      title: "Select Department", 
      content: deptTree, 
      onSuccess: this.handleModalSuccess, 
      onSubdeptClick: this.handleSubdeptClick}
    );
  },

  renderDepartmentList: function() {
    return React.createElement(DeptList, {
      ref: "deptList", 
      onRemoveDept: this.handleRemoveDept, 
      items: this.state.selectedDepartments}
    )
  },

  renderBrowseButton: function() {
    return React.createElement("div", {className: "browse-button"}, 
      React.createElement("input", {type: "button", 
        value: "Browse", 
        className: "form-submit", 
        onClick: this.handleBrowseClick}
      )
    )
  },

  handleRemoveDept: function(doomed) {
    var dept_id = doomed.props.id;
    var config = this.state.config;

    config.items = config.items.filter(function(item){
      return (dept_id != item.dept_id);
    });

    delete config.options[dept_id];

    this.setState({ config: config });

    this.setSelectedDepartments();
  },

  handleSubdeptClick: function() {
    this.setState({ includeSubdepts: !this.state.includeSubdepts });
  },

  handleModalSuccess: function() {
    // setup config
    this.setDeptConfig(this.refs.deptTree.state.currentNode);

    // update selected departments list
    this.setSelectedDepartments();
  },

  handleBrowseClick: function(event) {
    this.refs.modal.show();
  },

  handleDeptTreeClick: function(data) {
    this.setState({ currentNode: data.node });
  },

  setSelectedDepartments: function() {
    var deptTree = this.refs.deptTree;
    var config = this.state.config;
    var depts = [];

    config.items.map(function(item, index){
      depts.push({
        id: item.dept_id,
        title: deptTree.getDeptPath(item.tid),
        subdepts: config.options[item.dept_id].subdepts
      });
    });

    this.setState({ selectedDepartments: depts });
  },

  setDeptConfig: function(data) {
    // get the tree path to set the label
    var config = this.state.config;

    var unique = true;
    config.items.map(function(item, index) {
      if (item.dept_nid == data.dept_nid) {
        unique = false;
        config.options[item.dept_id].subdepts = this.state.includeSubdepts;
      }
    }.bind(this));

    if (unique) {
      config.items.push({
        'dept_id': data.dept_id,
        'dept_nid': data.dept_nid,
        'tree_nids': data.tree_nids,
        'tid': data.tid
      });

      config.options[data.dept_id] = {
        subdepts: this.state.includeSubdepts
      };
    }

    this.setState({ config: config });
  }
});


},{"./dept-list":4,"./dept-tree":5,"./modal":6}],3:[function(require,module,exports){
/**
 * ASU Department List Item Component
 */
module.exports = React.createClass({displayName: "exports",
  handleItemRemove: function(event) {
    this.props.onRemoveDept(this);
  },

  render: function() {
    return React.createElement("li", {ref: "dept"}, 
      this.props.title, 
      this.renderSubdeptsLabel(), 
      React.createElement("span", {className: "tag remove"}, 
        React.createElement("span", {
          onClick: this.handleItemRemove, 
          className: "fa fa-close"})
      )
    )
  },

  renderSubdeptsLabel: function() {
    if (this.props.subdepts) {
      return React.createElement("span", {className: "tag subdepts"}, "+subdepts")
    }
  }
});


},{}],4:[function(require,module,exports){
/**
 * ASU Department Picker Component
 */
var DeptListItem = require('./dept-list-item');

module.exports = React.createClass({displayName: "exports",
  render: function() {
    return React.createElement("ul", {className: "asu-dept-list"}, 
      this.renderList()
    )
  },

  renderList: function() {
    return this.props.items.map(function(item) {
      return React.createElement(DeptListItem, {
        key: item.id, 
        onRemoveDept: this.props.onRemoveDept, 
        subdepts: item.subdepts, 
        id: item.id, 
        title: item.title}
      )
    }.bind(this));
  },
});


},{"./dept-list-item":3}],5:[function(require,module,exports){
var $ = jQuery;

/**
 * Department Tree Component
 */
module.exports = React.createClass({displayName: "exports",
  getInitialState: function() {
    return {
      treeData: JSON.parse(this.props.tree_json_data),
      currentNode: {
        dept_id: 1234,
      }
    }
  },
  componentDidMount: function() {
    // initialize tree plugin...
    var el = this.refs.treeWidget;
    var tree_data = this.state.treeData;
    var topLevel = 10;

    var defaults = {
      openAt: 1,
      showOnly: null,
      autoOpen: 0
    };
    options = $.extend(defaults, this.props);

    $(el).tree({
      data: tree_data,
      closedIcon: $('<span class="fa fa-plus-circle"></span>'),
      openedIcon: $('<span class="fa fa-minus-circle"></span>'),

      // First level open
      autoOpen: options.autoOpen,
      selectable: true,

      // Assign dept_id attribute to each tree <li>
      onCreateLi: function (node, $li) {
        $li.attr('dept_nid', node.dept_nid);
        $li.attr('dept_id', node.dept_id);

        if (options.showOnly && Array.isArray(options.showOnly) && options.showOnly.length) {
          $(el).addClass('trimmed');

          $.each(options.showOnly, function(index, item){
            if (item == node.dept_nid || node.dept_id == 'ASU') {
              $li.addClass('visible');
            }
          });
        }

        if (!node.hasChildren()) {
          $li.find('.jqtree-element').prepend('<span class="jqtree-folder-icon fa fa-bookmark"></span>');
        }
      }
    });

    $(el).bind('tree.click', this.onTreeClick);
  },
  render: function() {
    return React.createElement("div", {className: "asu-dept-tree"}, 
      React.createElement("div", {className: "tree-wrapper", ref: "treeWidget"}, "Tree widget")
    )
  },
  onTreeClick: function(event) {
    event.node.tree_nids = this.getTreeIds(event.node);
    this.setState({ currentNode: event.node });
    this.props.onTreeClick(event);
  },
  getDeptPath: function(dept_tid, path, reverse) {
    switch (arguments.length) {
      case 1: path = [];
      case 2: reverse = true;
    }

    if (item = this.findRootDept(dept_tid, 'tid')) {

      var className = ['fragment'];

      if (item.parents[0] == '0') {
        // abbreviate Arizona State University
        item.name = 'ASU';
        className.push('first');
      }
      if (item.children.length == 0) {
        className.push('last');
      }

      path.push(React.createElement("span", {key: dept_tid, className: className.join(' ')}, item.name));
      if (item.parents.length) {
        path = this.getDeptPath(item.parents[0], path, false);
      }
    }

    if (reverse) {
      path = path.reverse();
    }

    return path;
  },
  getTreeIds: function(tree, tree_ids) {
    if (arguments.length == 1) {
      tree_ids = [];
    }

    tree_ids.push(tree.dept_nid);

    for (var i = 0; i < tree.children.length; i++) {
      this.getTreeIds(tree.children[i], tree_ids);
    }

    return tree_ids;
  },
  findRootDept: function(dept_id, id_type, data) {
    var dept = null;

    switch(arguments.length) {
      case 1:
        id_type = 'dept_nid';
      case 2:
        data = this.state.treeData;
        break;
    }

    if (arguments.length == 1) {
      id_type = 'dept_nid';
    }

    for (var i = 0; i < data.length; i++) {
      if (dept == null && data[i] != null) {
        if (data[i][id_type] == dept_id) {
          return data[i];
        }
        else if (data[i].hasOwnProperty('children')) {
          dept = this.findRootDept(dept_id, id_type, data[i].children);
        }
      }
      else {
        break;
      }
    }
    return dept;
  }
});


},{}],6:[function(require,module,exports){
/**
 * Department Tree Component
 */
var DeptTree = require('./dept-tree');

module.exports = React.createClass({displayName: "exports",
  componentDidMount: function() {
    document.addEventListener('keyup', function(e) {
      if (e.keyCode == 27) {
        this.hide();
      }
    }.bind(this));
  },

  getInitialState: function() {
    return {
      open: false
    }
  },

  render: function() {

    var modalClass = (this.state.open ? 'dialog-open' : '');

    return React.createElement("div", {className: "asu-dept-picker-modal " + modalClass}, 
      React.createElement("div", {className: "dialog"}, 
        React.createElement("div", {className: "dialog-title"}, 
          this.props.title, 
          React.createElement("div", {className: "close-dialog", onClick: this.handleCancelClick}, 
            React.createElement("span", {className: "fa fa-close"})
          )
        ), 
        this.props.content, 
        React.createElement("div", {className: "actions"}, 
          React.createElement("div", {className: "form-item form-type-checkbox"}, 
            React.createElement("input", {
              ref: "include_subdept", 
              type: "checkbox", 
              className: "form-checkbox", 
              onClick: this.handleSubdeptClick, 
              defaultChecked: this.state.includeSubdepts ? 'checked' : ''}
            ), 
            React.createElement("label", {className: "option", onClick: this.handleLabelClick}, " Include sub-departments?"), 
            React.createElement("div", {className: "description", style: {'display': 'none'}}, 
              "This will include all sub-departments beneath the selected department."
            )
          ), 
          React.createElement("input", {type: "button", 
            className: "form-submit", 
            onClick: this.handleSubmitClick, 
            value: "Submit"}
          ), 
          React.createElement("input", {type: "button", 
            className: "form-submit", 
            onClick: this.handleCancelClick, 
            value: "Cancel"}
          )
        )
      )
    )
  },

  handleSubdeptClick: function() {
    if (this.props.onSubdeptClick) {
      this.props.onSubdeptClick();
    }
  },

  handleLabelClick: function() {
    this.refs.include_subdept.click();
  },

  handleCancelClick: function() {
    if (this.props.onCancelClick) {
      this.props.onCancelClick();
    }

    this.hide();
  },

  handleSubmitClick: function() {
    if (this.props.onSuccess) {
      this.props.onSuccess();
    }

    this.hide();
  },

  show: function() {
    this.setState({ open: true });
  },

  hide: function() {
    this.setState({ open: false });
  }
});

},{"./dept-tree":5}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
